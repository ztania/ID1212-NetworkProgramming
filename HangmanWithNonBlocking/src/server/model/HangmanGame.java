/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server.model;

import java.util.ArrayList;

/**
 * Start processing the user input and determine appropriate response 
 */
public class HangmanGame {
	
	private int remainingChances = 0;
	private RandomWordGenrator generate = new RandomWordGenrator();
	private String selectedWord;
	StringBuilder stringBuilder = new StringBuilder(); 
	private int score = 0;
	private ArrayList<String> allWords = new ArrayList<String>();
	boolean isGameOver = false;
	
	/*Calls the readfile method from RandomWordGenerator class and reads the file words.txt 
         *to generate the words
         *from the for the user and does not need to do every time a user starts a new game
         */
	public String initialMessage(){
		allWords = generate.readFile();
		return "Welcome to the Hangman Game!\nWrite 'New Game' to start playing or 'Quit' to quit game"+
                        "\nAfter starting the game you can either insert a letter or a whole word!";
	}
	
	
        /*The generateWord method is called to randomly select a word from the file when a user connects to the server
         *and starts a new game and returns a string containing dashed lines to the lnegth of the selected word 
         *with the number of remaining chances.
         */ 
	public String newGame() {
		
		isGameOver = false;
		
		selectedWord = generate.generateWord(allWords);
		stringBuilder.setLength(0);
		for (int i = 0; i < selectedWord.length(); i++) {
			stringBuilder.append("-");
		}
		System.out.println(selectedWord);
		remainingChances = selectedWord.length();
		return "Your word has " + selectedWord.length() + " letters\n" + stringBuilder.toString() + 
                        "\nNumber of remaining guess: " + remainingChances;
	}
	
        /*
         * When the user guess a letter in the console this method is called and checkes every position of the word 
         * if the letter matches. Then the string is returned with the matching letter/letters and 
         *unmatched letters with dashed line. 
         */
	
	public String letterGuess(char letter) {
		
		//The server thread sleeps for 10 seconds. This is used to simulate a long-lasting computation from the server,
		//In order to demonstrate that the user interface will still be responsive during this time. 
		/*try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}*/
		
		if(isGameOver) {
			return "You have to start a new game to keep playing";
		}
		
		ArrayList<Integer> allPositionsInWord = checkLetter(letter);
		if(allPositionsInWord.isEmpty()) {
			remainingChances--;
		}
		
		if (remainingChances == 0) {
			score--;
			isGameOver = true;
			return "Game Over! The word was: " + selectedWord + ". Your score is: " + score;
		}
		
		else {
			for (int i = 0; i < allPositionsInWord.size(); i++) {
				stringBuilder.setCharAt(allPositionsInWord.get(i), letter);
			}
		}
		
		if(!stringBuilder.toString().contains("-")) {
			score++;
			isGameOver = true;
			return ("YOU WON! Your score is: " + score);
		}
		
		return stringBuilder.toString() + "\nNumber of guesses left: " + remainingChances;
	}

	/**
	 * Checks if the letter provided by the user matches any position in the word generated by the server 
	 * and returns an array containing all the positions in the word that matches the letter guess
	 */
	public ArrayList<Integer> checkLetter(char letter) {
		
		ArrayList<Integer> allPositionsInWord = new ArrayList<Integer>();
		
		for( int i = 0; i < selectedWord.length( ); i++ ){
		    if(Character.toLowerCase(letter) == Character.toLowerCase(selectedWord.charAt(i))) {
		    	allPositionsInWord.add(i);
		    }
		}
		
		return allPositionsInWord;
	}
	
	/**
	 * Checks if the word guessed by the user matches the word generated by the client
	 * and returns the correct word if the guessed word was a match, otherwise the existing String 
	 */
	public String wordGuess(String guessedWord) {
		
		if(isGameOver) {
			return "You have to start a new game to keep playing";
		}
		
		if (remainingChances == 0) {
			score--;
			isGameOver = true;
			return "Game Over! The word was: " + selectedWord + ". Your score is: " + score;
		}
		
		if (guessedWord.equalsIgnoreCase(selectedWord)) {
			score++;
			isGameOver = true;
			return ("YOU WON! Your score is: " + score);
		}
		else{
			remainingChances--;
			return stringBuilder.toString() + "\nNumber of guesses left: " + remainingChances;
		}
	}
}

