 package server.model;

import java.util.ArrayList;

/**
 * Processes the input received from the user and determines the appropriate response. 
 */
public class HandleUserGuess {
	
	private int numOfGuesses = 0;
	private GenerateWord generate = new GenerateWord();
	private String selectedWord;
	StringBuilder sb = new StringBuilder();
	private int score = 0;
	private ArrayList<String> allWords = new ArrayList<String>();
	boolean isGameOver = false;
	
	/**
	 * Calls the readFile method "readFile" in generate to get all the words, so that this does not have to be done every 
	 * time the user starts a new game. 
	 */
	public String initialMessage(){
		allWords = generate.readFile();
		return "Welcome to the game!\nWrite 'New Game' to start playing or 'Quit' to quit game";
	}
	
	/**
	 * When the user first connect to the server to start a game this method is called to get a word to play with 
	 * by using the "GenerateWord" class and returns a String containing a dash character for each letter in the word. 
	 * @return A string of word.length dashes 
	 */
	public String newGame() {
		
		isGameOver = false;
		
		selectedWord = generate.generateWord(allWords);
		sb.setLength(0);
		for (int i = 0; i < selectedWord.length(); i++) {
			sb.append("-");
		}
		System.out.println(selectedWord);
		numOfGuesses = selectedWord.length();
		return "Your word has " + selectedWord.length() + " letters\n" + sb.toString() + "\nNumber of guesses left: " + numOfGuesses;
	}
	
	/**
	 * When the user guesses on a letter this method handles the guess by setting each position in the word that 
	 * matches the guessed letter to that letter. 
	 * @param letter The guessed letter from the user 
	 * @return The new String where the dashes on the positions that matches the guessed letter has been replaced by that letter
	 */
	public String letterGuess(char letter) {
		
		//The server thread sleeps for 10 seconds. This is used to simulate a long-lasting computation from the server,
		//In order to demonstrate that the user interface will still be responsive during this time. 
		/*try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}*/
		
		if(isGameOver) {
			return "You have to start a new game to keep playing";
		}
		
		ArrayList<Integer> allPositionsInWord = checkLetter(letter);
		if(allPositionsInWord.isEmpty()) {
			numOfGuesses--;
		}
		
		if (numOfGuesses == 0) {
			score--;
			isGameOver = true;
			return "Game Over! The word was: " + selectedWord + ". Your score is: " + score;
		}
		
		else {
			for (int i = 0; i < allPositionsInWord.size(); i++) {
				sb.setCharAt(allPositionsInWord.get(i), letter);
			}
		}
		
		if(!sb.toString().contains("-")) {
			score++;
			isGameOver = true;
			return ("YOU WON! Your score is: " + score);
		}
		
		return sb.toString() + "\nNumber of guesses left: " + numOfGuesses;
	}

	/**
	 * Checks if the letter provided by the user matches any position in the word generated by the server 
	 * @param letter The letter guess from the user
	 * @return An array containing all the positions in the word that matches the letter guess
	 */
	public ArrayList<Integer> checkLetter(char letter) {
		
		ArrayList<Integer> allPositionsInWord = new ArrayList<Integer>();
		
		for( int i = 0; i < selectedWord.length( ); i++ ){
		    if(Character.toLowerCase(letter) == Character.toLowerCase(selectedWord.charAt(i))) {
		    	allPositionsInWord.add(i);
		    }
		}
		
		return allPositionsInWord;
	}
	
	/**
	 * Checks if the word guessed by the user matches the word generated by the client
	 * @param guessedWord The word that was guessed by the user 
	 * @return The correct word if the guessed word was a match, otherwise the existing String 
	 */
	public String wordGuess(String guessedWord) {
		
		if(isGameOver) {
			return "You have to start a new game to keep playing";
		}
		
		if (numOfGuesses == 0) {
			score--;
			isGameOver = true;
			return "Game Over! The word was: " + selectedWord + ". Your score is: " + score;
		}
		
		if (guessedWord.equalsIgnoreCase(selectedWord)) {
			score++;
			isGameOver = true;
			return ("YOU WON! Your score is: " + score);
		}
		else{
			numOfGuesses--;
			return sb.toString() + "\nNumber of guesses left: " + numOfGuesses;
		}
	}
}
